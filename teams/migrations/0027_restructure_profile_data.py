# Generated by Django 5.1.7 on 2025-03-18 19:33

from django.db import migrations, models
import django.db.models.deletion
from django.core.validators import MinValueValidator, MaxValueValidator

def migrate_profile_data(apps, schema_editor):
    # Get the model classes
    Profile = apps.get_model('teams', 'Profile')
    TeamMember = apps.get_model('teams', 'TeamMember')
    TeamMemberProfile = apps.get_model('teams', 'TeamMemberProfile')
    Team = apps.get_model('teams', 'Team')
    
    # Get team with ID 1 (default team)
    try:
        default_team = Team.objects.get(id=1)
    except Team.DoesNotExist:
        raise Exception("Team with ID 1 must exist for migration")

    # First, ensure all users have a membership in team 1
    for profile in Profile.objects.all():
        # Ensure user has a membership in team 1
        team_member, created = TeamMember.objects.get_or_create(
            team=default_team,
            user=profile.user,
            defaults={
                'role': 'PLAYER',  # Using string since we can't access model choices in migrations
                'is_active': True,
                'invitation_accepted': True
            }
        )
        
        # Create TeamMemberProfile for team 1 with the old profile data
        team_profile, created = TeamMemberProfile.objects.get_or_create(
            team_member=team_member,
            defaults={
                'profile_picture': profile.profile_picture,
                'description': profile.description,
                'player_number': profile.player_number,
                'position': profile.position,
                'level': profile.level,
                'is_official': profile.is_official,
                'active_player': profile.active_player,
                'condition': profile.condition,
            }
        )
        
        # For any existing team memberships other than team 1, create empty profiles
        for other_member in TeamMember.objects.filter(user=profile.user).exclude(team=default_team):
            TeamMemberProfile.objects.get_or_create(
                team_member=other_member,
                defaults={
                    'profile_picture': 'profile_pics/castolo.png',
                    'level': 1,
                    'condition': 'NORMAL',
                    'active_player': True
                }
            )

def reverse_migrate_profile_data(apps, schema_editor):
    # This is a destructive migration, but we'll provide basic reversal
    Profile = apps.get_model('teams', 'Profile')
    TeamMemberProfile = apps.get_model('teams', 'TeamMemberProfile')
    Team = apps.get_model('teams', 'Team')
    
    try:
        default_team = Team.objects.get(id=1)
        
        # We'll take the TeamMemberProfile from team 1 as the source of truth
        for profile in Profile.objects.all():
            try:
                team_profile = TeamMemberProfile.objects.get(
                    team_member__team=default_team,
                    team_member__user=profile.user
                )
                
                profile.profile_picture = team_profile.profile_picture
                profile.description = team_profile.description
                profile.player_number = team_profile.player_number
                profile.position = team_profile.position
                profile.level = team_profile.level
                profile.is_official = team_profile.is_official
                profile.active_player = team_profile.active_player
                profile.condition = team_profile.condition
                profile.save()
            except TeamMemberProfile.DoesNotExist:
                pass
    except Team.DoesNotExist:
        pass

class Migration(migrations.Migration):
    dependencies = [
        ('teams', '0026_playermatchstats_assists'),
    ]

    operations = [
        migrations.CreateModel(
            name='TeamMemberProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_picture', models.ImageField(blank=True, default='profile_pics/castolo.png', upload_to='profile_pics/')),
                ('description', models.CharField(blank=True, help_text='A short description (max 20 characters)', max_length=20)),
                ('player_number', models.IntegerField(blank=True, null=True)),
                ('level', models.IntegerField(default=1, validators=[MinValueValidator(1), MaxValueValidator(99)])),
                ('is_official', models.BooleanField(default=False, help_text='Indicates if the player is officially registered')),
                ('active_player', models.BooleanField(default=True, help_text='Indicates if the player is currently active')),
                ('condition', models.CharField(choices=[('TOP', 'Top Condition'), ('GOOD', 'Good Condition'), ('NORMAL', 'Normal Condition'), ('BAD', 'Bad Condition'), ('AWFUL', 'Awful Condition'), ('INJURED', 'Injured')], default='NORMAL', max_length=10)),
                ('position', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='teams.position')),
                ('team_member', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='teams.teammember')),
            ],
            options={
                'unique_together': {('team_member', 'player_number')},
            },
        ),
        migrations.RunPython(
            migrate_profile_data,
            reverse_migrate_profile_data
        ),
    ]
